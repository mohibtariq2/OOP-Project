#include<iostream>
#include<conio.h>
#include<stdio.h>
#include<fstream>
#include<iostream>
#include<stdlib.h>
#include<string.h>
using namespace std;

class Customer
{
	protected:
		char name [50];
        long int  cnic;
  		long long phone_num;
  		char address[100];
  		char gender;
  		int Customer_ID;
  		int Subscription_ID;
  		char email[100];
  		
  	public:
  		void InputData();
  		void showData();
  	    void DisplayCustomer();
  	    void Add();
        void deleteRecord(int i);
  		int search(long int i);
  		void updateRecord(int i);
  		int TotalRecords();
			
};
  		
  		
void Customer:: InputData()
  		{
  			cout << "*** E N T E R   D E T A I L S ***" << endl;
  			cout << "Enter customer name: ";
  			cin.ignore();
  			cin.getline(name,49);
  			cout << endl;
  			cout << "Cnic Number: ";
  			cin >> cnic;
  			cout << endl;
  			cout << "Phone number: ";
  			cin >> phone_num;
  			cout << endl;
  			cout << "Address: ";
  			cin.ignore();
  			cin.getline(address,99);
  			cout << endl;
  			cout << "Enter gender M or F: ";
  			cin >> gender;
  			cout << endl;
  			cout << "Customer ID: ";
  			cin >> Customer_ID;
  			cout << endl;
  			cout << "Subscription ID: ";
  			cin >>  Subscription_ID;
  			cout << endl;
  			cout << "Email Address: ";
  			cin.ignore();
  			cin.getline(email,99);
  			cout << endl;	
		  }
		  
//show data
void Customer::showData()
		  {
		  	cout << "Name: " << name << endl;
		  	cout << "Cnic Number: " << cnic << endl;
		  	cout << "Phone number: " << phone_num << endl;
		  	cout << "Address: " << address << endl;
		  	cout << "Gender: " << gender << endl;
		  	cout << "Customer ID: " << Customer_ID << endl;
		  	cout << "Subscription ID: " << Subscription_ID << endl;
		  	cout << "Email Address: " << email << endl;
		  }
		  
//display data from file
void Customer::DisplayCustomer()
		  {
		  		ifstream fin;
		    	fin.open("record.txt", ios::in);
		    	if(!fin)
		    	{
		    		cout << "\nFile not found" << endl;
				}
				else
				{
					fin.read((char*)this,sizeof(*this));
					while(!fin.eof())
					{
						showData();
						fin.read((char*)this,sizeof(*this));
					}	
				}
		fin.close();
		  }
		
//add customer
void Customer::Add() 
		{
			ofstream fout;
			fout.open("record.txt",ios::app);
			fout.write((char*)this, sizeof(*this));
			fout.close();
		}
		
//delete data
void Customer::deleteRecord(int i)
{
	ifstream fin;
	ofstream fout;
	fin.open("record.txt",ios::in|ios::binary);
	if(!fin)
	{
		cout<<"File Not Found !"<<endl;
	}
	else
	{
		getch();
		fout.open("temp.txt",ios::out);
		fin.read((char*)this,sizeof(*this));
		while(!fin.eof())
		{
			if(i!=cnic)
			{
				fout.write((char*)this,sizeof(*this));
			}
			fin.read((char*)this,sizeof(*this));
		}
		fin.close();
		fout.close();
		getch();
		remove("record.txt");
		getch();
		rename("temp.txt","record.txt");
	}
}

//searchCustomer
int Customer::search(long int i)
			{
				bool flag = true;
				int count=0;
				ifstream fin;
				fin.open("record.txt", ios::in);
				if(!fin)
		    	{
		    		cout << "\nFile not found" << endl;
				}
			else
			{
				fin.read((char*)this,sizeof(*this));
				while(!fin.eof())
				{
					if(i==cnic)
					{
						showData();
						count++;
					}
					fin.read((char*)this,sizeof(*this));
				}	
			}
			if(flag == false)
			{
				cout << "No such record" << endl;
			}
			fin.close();

		}
		
//updateData	
void Customer::updateRecord(int i)
{
	fstream file;
	file.open("record.txt", ios::in|ios :: out| ios::ate);
	file.seekg(0);
	file.read((char*)this,sizeof(*this));
	while(!file.eof())
	{
		if(i==cnic)
		{  
		    InputData();
			file.seekp(file.tellp()-sizeof(*this));
			file.write((char*)this,sizeof(*this));
		}
		file.read((char*)this,sizeof(*this));
	}
}	

int Customer::TotalRecords()
{
			int i=0;
		    	ifstream fin;
		    	fin.open("record.txt", ios::in);
		    	if(!fin)
		    	{
		    		cout << "\nFile not found" << endl;
				}
				else
				{
					fin.read((char*)this,sizeof(*this));
					while(!fin.eof())
					{
						i++;
						fin.read((char*)this,sizeof(*this));
					}	
					
				}
				
				cout << "Total records: " << i << endl;
				fin.close();
				return i;
}	
	
		

//for room management
class RoomManagement: public Customer
{
	private:
		int room_no;
		
	public:
	
	void output();
	void AddCustomer();
	void ViewCustomer();
	void rooms();
	void edit();
	int check(int);
	void bill(int);
	void finalroommain();
	
};

//to check the room status
int RoomManagement::check(int r)
{

int flag=0;

ifstream fin("record.txt",ios::in);

while(!fin.eof())
{

fin.read((char*)this,sizeof(*this));
if(room_no==r)
{

flag=1;
break;

}

}

fin.close();
return(flag);

}


void RoomManagement::AddCustomer()
{
	int r,flag;
	ofstream fout("record.txt",ios::app);
	cout<<"\n------ROOMS DETALS------\n";
	cout<<"Total no.of rooms in this hotel are: 50\n";
	cout<<"(1).Simple rooms(with 1 bed): 1-15\n(2).Simple rooms(with 2 beds): 16-30\n(3).Luxury rooms:31-45\n(4).Royal suites: 46-50 \n";
	cout<<"Enter the number of room you would like to stay in: ";
	cin>>r;
	
	flag=check(r);
	if(flag)
	{
		cout<<"\nSORRY! The room is already booked.";
	}
	else
	{
		room_no=r;
	    Customer:: InputData();
	    Customer:: Add();
		cout<<"/n...Room is booked...\n";
	}
	cout<<"\n Press any key to continue.....!!";
    getch();
	fout.close();
}

//for viewing particular customer
void RoomManagement::ViewCustomer()
{
	ifstream fin("record.txt",ios::in);
	long int c;
	int flag;
	cout<<"\nEnter the Cnic for the customer details: ";
	cin>>c;
	while(!fin.eof())
{

fin.read((char*)this,sizeof(*this));
if(cnic==c)
{
cout<<"\n Customer Details";
cout<<"\n ----------------\n"; 
 Customer::search(c);
flag=1;
break;

}

}

if(flag==0)
cout<<"\n Sorry No such CNIC found....!!";
cout<<"\n\n Press any key to continue....!!";
getch();
fin.close();
}

//to display alotted rooms
void RoomManagement::rooms()
{
ifstream fin("record.txt",ios::in);
cout<<"\n\t\t\t    List Of Rooms Allotted";
cout<<"\n\t\t\t    ----------------------";
cout<<"\n\n Room No.\tCNIC\t\tName\t\tAddress\t\t\tPhone No.\t\tGender\t\tEmail Address\n";

while(!fin.eof())
{

fin.read((char*)this,sizeof(*this));
cout<<"\n\n "<<room_no<<"\t\t"<<cnic<<"\t\t"<<name;
cout<<"\t\t"<<address<<"\t\t"<<phone_num<<"\t\t"<<gender<<"\t\t"<<email;

}
cout<<"\n\n\n\t\t\tPress any key to continue.....!!";
getch();
fin.close();
}


//to edit customer record
void RoomManagement::edit()
{

  system("cls");

int choice,r;
long int c;
cout<<"\n EDIT MENU";
cout<<"\n ---------";
cout<<"\n\n 1.Modify Customer Record";
cout<<"\n 2.Delete Customer Record";
cout<<"\n 3. Bill Of Customer";
cout<<"\n Enter your choice: ";

cin>>choice;
  system("cls");



switch(choice)
{

case 1:	
cout<<"\n Enter the CNIC: " ;
cin>>c;
Customer::updateRecord(c);
break;

case 2:	
cout<<"\n Enter the CNIC: " ;
cin>>c;
cin.ignore();
Customer::deleteRecord(c);
break;

case 3:
cout<<"\n Enter the Room no: " ;
cin>>r; 
int ch, num, pin;
	cout << "1. Cash\n2. Credit Card" << endl;
	cin >> ch;
	switch(ch)
	{
		case 1:
			{
				bill(r);
				break;
			}
		
		case 2:
			{
				cout << "Credit Card Number: ";
				cin >>num;
				cout << endl;
				cout << "Enter Pin: ";
				cin >> pin;
				cout << endl;
                bill(r);
				break;				
			}
	}
break;

default: cout<<"\n Wrong Choice.....!!";

}

}



//FUNCTION FOR CUSTOMER`S BILL

void RoomManagement::bill(int r)
{

RoomManagement r1;
ifstream f1;
 f1.open("record.txt",ios::in|ios::binary);

if(!f1)
 cout<<"cannot open";

 else
 {

  f1.read((char*)&r1,sizeof (RoomManagement));
  while(f1)

  {

  f1.read((char*)&r1,sizeof (RoomManagement));

  }

  if (r1.room_no == r)
  {

  if(r1.room_no>=1&&r1.room_no<=30)
  cout<<"your bill = 2000";

  else if (r1.room_no>=35&&r1.room_no<=45)
  cout<<"your bill = 5000" ;

  else
  cout<<"your bill = 7000";

  }

  else
  { cout<<"room no. not found";}

  }

  f1.close();
  getch();

}

//END OF BILLING FUNCTION

//START OF MAIN PROGARM

void RoomManagement:: finalroommain()
{

RoomManagement r1;
  system("cls");
int choice;
while(choice!=5)
{

cout<<"\n\n\n\t\t\t1.Book A Room";
cout<<"\n\t\t\t2.Customer Records";
cout<<"\n\t\t\t3.Rooms Allotted";
cout<<"\n\t\t\t4.Edit Record";
cout<<"\n\t\t\t5.Exit";
cout<<"\n\n\t\t\tEnter Your Choice: ";
cin>>choice;

switch(choice)
{

case 1:	
{
r1.AddCustomer();
break;	
}

case 2: r1.ViewCustomer();
break;

case 3: r1.rooms();
break;

case 4:	r1.edit();
break;

case 5: break;

default:
{

cout<<"\n\n\t\t\tWrong choice.....!!!";
cout<<"\n\t\t\tPress any key to   continue....!!";
getch();

}

}

}
}


//Class **** R E S T A U R A N T *****
class Restaurant
{
	private:
		
	char dish[50];
	char description[200];
    int key;
    float price;
    
    public:
	//******************************************** M E N U   E D I T   F U N C T I O N S ********************************************//
void FileAdd() 
		{
			ofstream fout;
			fout.open("Menu.txt",ios::app);
			fout.write((char*)this, sizeof(*this));
			fout.close();
		}
		
void MenuAdd()
    	{
    		cout << "*** N E W   D I S H ***" << endl;
    		cout << "Dish Name: ";
    		cin.ignore();
    		cin.getline(dish,49);
    		cout << endl;
    		cout << "Description: ";
    		cin.ignore();
    		cin.getline(description,199);
    		cout << endl;
    		cout << "Key: ";
    		cin >> key;
    		cout << endl;
    		cout << "Price: $ ";
    		cin >> price;
    		cout << endl;
			FileAdd();	
		}
		
void ShowDish()
	{		cout << "Dish Name: " << dish << endl;
    		
    		cout << "Description: " << description << endl;
    		
    		cout << "Key: " << key << endl;
    	
    		cout << "Price: $ " << price << endl;
    		
	}
		
void FileOrder() 
		{
			ofstream fout;
			fout.open("CustomerOrder.txt",ios::app);
			fout.write((char*)this, sizeof(*this));
			fout.close();
		}
				
bool CheckDish(int k)
    {
    	bool flag = false;
				ifstream fin;
				fin.open("Menu.txt", ios::in);
				if(!fin)
		    	{
		    		cout << "\nFile not found" << endl;
				}
			else
			{
				fin.read((char*)this,sizeof(*this));
				while(!fin.eof())
				{
					if(k==key)
					ShowDish();
					fin.read((char*)this,sizeof(*this));
					return true;
				}	
			}
			if(flag == false)
			{
				cout << "No such record" << endl;
				return false;
			}
			fin.close();
	}
	
void DisplayMenu()
	{
		ifstream fin;
		    	fin.open("Menu.txt", ios::in);
		    	if(!fin)
		    	{
		    		cout << "\nFile not found" << endl;
				}
				else
				{
					fin.read((char*)this,sizeof(*this));
					while(!fin.eof())
					{
						ShowDish();

						fin.read((char*)this,sizeof(*this));
					}	
					
				}
				fin.close();
	}
	
void UpdateMenu(int k)
		{
			fstream file;
			file.open("Menu.txt", ios::in|ios :: out| ios::ate);
			file.seekg(0);
			file.read((char*)this,sizeof(*this));
			while(!file.eof())
			{
				if(k == key)
			{  
		    MenuAdd();
			file.seekp(file.tellp()-sizeof(*this));
			file.write((char*)this,sizeof(*this));
			}
			file.read((char*)this,sizeof(*this));
	}
}

// ****************************************** C U S T O M E R   O R D E R   F U N C T I O N S ******************************************//
void NewOrder()
		{
		   int k;
	       cout << "*** N E W   O R D E R ***" << endl;
	       cout << "Enter key: ";
	       cin >> k;
	       if (CheckDish(k) == true)
		   {
	       	FileOrder();   
		   } 
		   
		   else
		   {
		   	  return NewOrder();
		   } 
		}

		void CancelOrder(int k)
		{
			ifstream fin;
			ofstream fout;
			fin.open("CustomerOrder.txt",ios::in);
			if(!fin)
			{
				cout<<"File Not Found !"<<endl;
			}
			else
			{
				fout.open("tempStudents.txt",ios::out);
				fin.read((char*)this,sizeof(*this));
				while(!fin.eof())
				{
						if(k == key)
				{
					fout.write((char*)this,sizeof(*this));
				}
					fin.read((char*)this,sizeof(*this));
				}
				fin.close();
				fout.close();
				remove("CustomerOrder.txt");
				rename("tempOrder.txt","CustomerOrder.txt");
			}
		}
		
void UpdateOrder(int k)
{
	        fstream file;
			file.open("CustomerOrder.txt", ios::in|ios :: out| ios::ate);
			file.seekg(0);
			file.read((char*)this,sizeof(*this));
			while(!file.eof())
			{
				if(k == key)
			{  
		    NewOrder();
			file.seekp(file.tellp()-sizeof(*this));
			file.write((char*)this,sizeof(*this));
			}
			file.read((char*)this,sizeof(*this));
}
}
		

void GenerateBill()
{
	float total;
	ifstream fin;
	fin.open("CustomerOrder.txt", ios::in|ios :: out);
	fin.read((char*)this,sizeof(*this));
	while(!fin.eof())
	{
		total+=price;
		fin.read((char*)this,sizeof(*this));
	}
	fin.close();	
	cout << "Total Payment : " << total << endl;

}
void PaymentType()
{
	int ch, num, pin;
	cout << "1. Cash\n2. Credit Card" << endl;
	cin >> ch;
	switch(ch)
	{
		case 1:
			{
				GenerateBill();
				break;
			}
		
		case 2:
			{
				cout << "Credit Card Number: ";
				cin >>num;
				cout << endl;
				cout << "Enter Pin: ";
				cin >> pin;
				cout << endl;
				GenerateBill();
				
			}
	}
	
}

void MainEditMenu()
{
	int ch,k;
	cout <<"*** E D I T   M E N U ***" << endl;
	cout << "1. Add New Dish in Menu\n2. Display Menu\n3. Update Menu\n0. Exit" << endl;
	cin >> ch;
	switch(ch)
	{
		case 1:
			{
				MenuAdd();
				ShowDish();
				break;
			}
		
		case 2:
			{
				DisplayMenu();
				break;
			}
			
		case 3:
			{
				cout << "*** C U R R E N T   M E N U ***" << endl;
				DisplayMenu();
				cout << "Enter Dish Key you want to Update: ";
				cin >> k;
				UpdateMenu(k);
				break;	
			}
			
		case 0:
			{
				break;
			}
}
}

void CustomerOrder()
{
	int ch,ans,k;
	cout <<"*** C U S T O M E R  O R D E R ***" << endl;
	cout << "1. Add Order\n2. Delete Order\n3. Update Order\n4. Generate Bil\n0. Exit" << endl;
	cin >> ch;
	switch(ch)
	{
	case 1:
		{
			NewOrder();
			break;
		}
		
	case 2:
		{
			cout << "Do you want to delete the complete order?\n1. Yes\n2. No" << endl;
			cin >> ans;
			if(ans==1)
			{
				remove("CustomerOrder.txt");
			}
			
			else if(ans==2)
			{
				cout << " Enter key of the Dish to be removed from the order: ";
				cin >>k;
				CancelOrder(k);	
			}
			
		break;	
		}
		
	case 3:
		{
			cout << " Enter key of the Dish to be replaced: ";
		    cin >>k;
			UpdateOrder(k);
			break;
		}
		
	case 4:
		{
			PaymentType();
			break;
		}
		
	case 0:
		{
			break;
		}
	}
			
}

//the function to be called in main
void finalrestaurantmain()
{
	int i,opt;
	Restaurant I[5];
	cout << "Initially the file is empty please enter test data" << endl;
	for(i=0;i<2;i++)
	{
	cout << "******** S E L E C T ********" << endl;
	cout << "1. Edit Menu\n2. Customer Order" << endl;
	cin >> opt;
	switch(opt)
	{
		case 1:
				{
					I[i].MainEditMenu();
					break;
				}
				
		case 2:
				{
					I[i].CustomerOrder();
					break;
				}
	}
		
	}


}
};

//Room Service 
class RoomService:public Restaurant
{
	char complain[100];
	public:
		void orderFood()
		{
			 CustomerOrder();
		}
	
		void help()
		{
			cout<<"\n***Please enter your complain***\n\n";
			cin.ignore();
			cin.getline(complain,99);
			cout<<"\n-----Thankyou for informing.Your complain has been registered and will be solved soon-----\n";
		}
		
		void finalservicemain()
		{
		       int ch;
				cout<<"Select:\n1.Order Food\n2.Complain\n3.Exit\n";
				cin>>ch;
			while(ch!=3)
			{
				switch(ch)
				{
					case 1:
						orderFood();
						break;
					case 2:
						help();
						break;
						
					case 3:
						break;
					
					default:
						{
					
						 cout<<"\n\n\t\t\tWrong choice.....!!!";
                  cout<<"\n\t\t\tPress any key to   continue....!!";
                  getch();
              }
						
				}
			}
		}
		
};


//END OF MAIN PROGRAM
// G Y M Class
class Gym:public Customer
{
	int customer_id;
	int trainerId;
	char trainer_name[20];
	char hallname[20];
	int equipment_id;
	char equipment_name[20];
	int exercise_plan_id;
	int duration;
	int subs_id;
	string payment_date;
	char payment_status;
	char equipment_status;
	string payment_time;
	
	
	public:
		
	void show_trainer()
	{
		cout<<"\n"<<trainerId<<" "<<trainer_name<<endl;
	}
	
	/////////// TRAINER //////////////////////////
	void get_trainer_data()
	{
		cout<<"Enter Trainer's ID :"<<endl;
		cin>>trainerId;
		
		cout<<"Enter Trainers Name : "<<endl;
		cin.ignore();
		cin.getline(trainer_name,19);
		
	}
	
		
	void add_trainer_data()
	{
	// Adding a record to a file
	get_trainer_data();// Taking Data As Input
	ofstream fout;
	fout.open("Trainers.txt",ios::app);
	fout.write((char*)this,sizeof(*this));// Writing Objects to file
	fout.close();
	}
	
	void delete_trainer(int t)
	{
	ifstream fin;
	ofstream fout;
	fin.open("Trainers.txt",ios::in);
	if(!fin)
	{
		cout<<"File Not Found !"<<endl;
	}
	else{
		fout.open("tempTrainers.txt",ios::out);
		fin.read((char*)this,sizeof(*this));
		while(!fin.eof())
		{
			if(!(t==trainerId))
			{
				fout.write((char*)this,sizeof(*this));
			}
			fin.read((char*)this,sizeof(*this));
			
		}
		fin.close();
		fout.close();
		remove("Trainers.txt");
		rename("tempTrainers.txt","Trainers.txt");
		
	}
	}
	
	void update_trainer(int tid)
	{
	fstream file;
	file.open("Trainers.txt",ios::in|ios::out|ios::ate);
	file.seekg(0);
	file.read((char*)this,sizeof(*this));
	while(!file.eof())
	{
		if(tid==trainerId)
		{
			get_trainer_data();
			file.seekp(file.tellp()-sizeof(*this));
			file.write((char*)this,sizeof(*this));
			
		}
		
		
		file.read((char*)this,sizeof(*this));
		
	}
	}
	
	void view_trainers()
	{
	ifstream fin;
	fin.open("Trainers.txt",ios::in);
	if(!fin)
	{
		cout<<"File Not Found !"<<endl;
	}
	
	else{
		fin.read((char*)this,sizeof(*this));// Reading Objects from file
		while(!fin.eof())
		{
			show_trainer();
			fin.read((char*)this,sizeof(*this));
		}
	fin.close();
	}
	}
	
	void choose_trainer()
	{
		int tid;
		cout<<"Enter ID of the trainer you want to choose :"<<endl;
		cin>>tid;
		
		cout<<"You have chosen the following Trainer :"<<endl;
		search_trainer(tid);
		
		delete_trainer(tid);
		
		cout<<"Trainers Have Been Updated"<<endl;
		
		
	}
	
	void search_trainer(int id)
	{
	int count=0;
	ifstream fin;
	fin.open("Trainers.txt",ios::in);
	if(!fin)
	{
		cout<<"File Not Found"<<endl;
	}
	else{
		fin.read((char*)this,sizeof(*this));
		while(!fin.eof())
		{
			if(id==trainerId)
			{
				show_trainer();
				count++;
			}
			fin.read((char*)this,sizeof(*this));
		}
		
	    if(count==0)
	    {
	    	cout<<"No Record Found"<<endl;
		}
		fin.close();
	}
	}
	
	
	
	
	///////////////// EQUIPMENT  //////////////////////////
	
	void show_equipments()
	{
		cout<<"\n"<<equipment_id<<" "<<equipment_name<<endl;
	}
	
	void get_equipment_data()
	{
		cout<<"Enter Equipment ID :"<<endl;
		cin>>equipment_id;
		
		cout<<"Enter Equipment Name :"<<endl;
		cin.ignore();
		cin.getline(equipment_name,19);
	}
	
	void add_equipment_data()
	{
	// Adding a record to a file
	get_equipment_data();// Taking Data As Input
	ofstream fout;
	fout.open("Equipments.txt",ios::app);
	fout.write((char*)this,sizeof(*this));// Writing Objects to file
	fout.close();
	}
	
	void display_equipments()
	{
	ifstream fin;
	fin.open("Equipments.txt",ios::in);
	if(!fin)
	{
		cout<<"File Not Found !"<<endl;
	}
	
	else{
		fin.read((char*)this,sizeof(*this));// Reading Objects from file
		while(!fin.eof())
		{
			show_equipments();
			fin.read((char*)this,sizeof(*this));
		}
	fin.close();
	}
	}
	
	void enter_working_status()
	{
		
			cout<<"Enter Equipment ID"<<endl;
			cin>>equipment_id;
			
			cout<<"Enter  Status (W-Working O-Out Of Order): "<<endl;
			cin>>equipment_status;
			
			ofstream fout;
	        fout.open("EquipmentStatus.txt",ios::app);
	        fout.write((char*)this,sizeof(*this));// Writing Objects to file
	        fout.close();
		
	}
	
	void view_e_status()
	{
		cout<<"\n"<<equipment_id<<" "<<equipment_status<<endl;
	}
	
	void view_equipment_status()
	{
	ifstream fin;
	fin.open("EquipmentStatus.txt",ios::in);
	if(!fin)
	{
		cout<<"File Not Found !"<<endl;
	}
	
	else{
		fin.read((char*)this,sizeof(*this));// Reading Objects from file
		while(!fin.eof())
		{
			view_e_status();
			fin.read((char*)this,sizeof(*this));
		}
	fin.close();
	}
	}
	
	
	
	////////////// EXERCISE PLANS /////////////////////////////////
	void get_plan_data()
	{
		cout<<"Enter Exercise Plan ID :"<<endl;
		cin>>exercise_plan_id;
		
		cout<<"Enter Trainer ID "<<endl;
		cin>>trainerId;
		
		cout<<"Enter Equipment ID :"<<endl;
		cin>>equipment_id;
		
		cout<<"Enter Duration of exercise :"<<endl;
		cin>>duration;
	}
	
	void add_exercise_plan()
	{
	// Adding a record to a file
	get_plan_data();// Taking Data As Input
	ofstream fout;
	fout.open("Plans.txt",ios::app);
	fout.write((char*)this,sizeof(*this));// Writing Objects to file
	fout.close();
	}
	
	
	
	void delete_plan(int i)
	{
		//Deleting A record
	ifstream fin;
	ofstream fout;
	fin.open("Plans.txt",ios::in);
	if(!fin)
	{
		cout<<"File Not Found !"<<endl;
	}
	else{
		fout.open("tempPlans.txt",ios::out);
		fin.read((char*)this,sizeof(*this));
		while(!fin.eof())
		{
			if(!(i==exercise_plan_id))
			{
				fout.write((char*)this,sizeof(*this));
			}
			fin.read((char*)this,sizeof(*this));
			
		}
		fin.close();
		fout.close();
		remove("Plans.txt");
		rename("tempPlans.txt","Plans.txt");
		
	}
	}
	
	void choose_plan()
	{
		int choice;
		int nid;
		char estatus;
		cout<<"Enter Exercise Plan ID you want to choose "<<endl;
		cin>>nid;
		
	int count=0;
	ifstream fin;
	fin.open("Plans.txt",ios::in);
	if(!fin)
	{
		cout<<"File Not Found"<<endl;
	}
	else{
		fin.read((char*)this,sizeof(*this));
		while(!fin.eof())
		{
			if(nid==exercise_plan_id)
			{
				showPlanData();
				count++;
			}
			fin.read((char*)this,sizeof(*this));
		}
		
	    if(count==0)
	    {
	    	cout<<"No Record Found"<<endl;
		}
		fin.close();
	}
		
		if(count>0)
		{
		
		ifstream fin;
		fin.open("EquipmentStatus.txt",ios::in);
		estatus=equipment_status;
		
		if (estatus=='O')
		{
			cout<<"Sorry The Chosen Machine is out of order !"<<endl;
		}
	}
		delete_plan(nid);
		
		cout<<"Plans Have been updated"<<endl;
		
}

void showPlanData()
	{
		cout<<"\n"<<exercise_plan_id<<" "<<trainerId<<" "<<equipment_id<<" "<<duration<<endl;
	}
	
	void exercise_plan()
	{
	cout<<"These Are The Available Exercise Plans :"<<endl;
	
	cout<<"Plan ID ***** Trainer ID ***** Equipment ID **** Duration Of Exercise"<<endl;
		
	ifstream fin;
	fin.open("Plans.txt",ios::in);
	if(!fin)
	{
		cout<<"File Not Found !"<<endl;
		
	}
	
	else{
		fin.read((char*)this,sizeof(*this));// Reading Objects from file
		while(!fin.eof())
		{
			showPlanData();
			fin.read((char*)this,sizeof(*this));
		}
	fin.close();
	}
	}
	
	
	///////////////// MEMBER SUBSCRIPTIONS //////////////////////////////////

    void get_subscription_details()
    {
    	
    	cout<<"Enter Subscription ID :"<<endl;
    	cin>>subs_id;
    	
    	cout<<"Enter Date of Payment (DAY/MONTH/YEAR):"<<endl;
    	cin>>payment_date;
    	
    	cout<<"Enter Time Of Payment (HH:MM):"<<endl;
    	cin>>payment_time;
    	
    	cout<<"Enter Customer ID :"<<endl;
    	cin>>customer_id;
    	
    	cout<<"Enter Status of Payment (Paid-P Unpaid-N)"<<endl;
    	cin>>payment_status;
    	
    }
    
    void store_subscriptions()
    {
    get_subscription_details();
    ofstream fout;
	fout.open("Subscriptions.txt",ios::app);
	fout.write((char*)this,sizeof(*this));// Writing Objects to file
	fout.close();
	}

    void check_subscription()
    {
    	int cid;
    	char status;
    	cout<<"Enter The Customer ID to check :"<<endl;
    	cin>>cid;
    	
    	ifstream fin;
    	fin.open("Subscriptions.txt",ios::in);
    	
    	if(cid=customer_id)
    	{
    		status=payment_status;
    		if(status=='P')
    		{
    			cout<<"Allow Member to enter - Payment Already Done"<<endl;
			}
			
			else if(status=='N')
			{
				cout<<"Donot Allow Member-Payment Not Done"<<endl;
			}
		}
		
		else{
			cout<<"No Matching Customer Found "<<endl;
		}
    	
    	
	}
	
void gym_finalmain()
{
	
	Gym g1;
	int choice;
	int tid;
	do{
	cout<<"1.Add a trainer"<<endl;
	cout<<"2.Delete a trainer"<<endl;
	cout<<"3.Update A Trainer"<<endl;
	cout<<"4.Display All trainers records"<<endl;
	cout<<"5.Add Equipment "<<endl;
	cout<<"6.Display All Equipments"<<endl;
	cout<<"7.View Working Status of each equipment"<<endl;
	cout<<"8.Update Working Status of Equipment"<<endl;
	cout<<"9.Add Exercise Plan "<<endl;
	cout<<"10.Choose An Exercise Plan"<<endl;
	cout<<"11.Select A Personal Trainer "<<endl;
	cout<<"12.View Available Trainers "<<endl;
	cout<<"13.View Monthly Invoice "<<endl;
	cout<<"14.Search a Member "<<endl;
	cout<<"15.Delete a Member"<<endl;
	cout<<"16.Update Member Record"<<endl;
	cout<<"17.View All Members :"<<endl;
	cout<<"18.Enter / Add New Subscription "<<endl;
	cout<<"19.Check Subscription Details Of a Member"<<endl;
	cout<<"20.Exit"<<endl;
	cin>>choice;
	
	switch(choice){
		
		case 1:
			{
				g1.add_trainer_data();
				break;
			}
			
		case 2:
			{
				cout<<"Enter ID of the Trainer you want to delete "<<endl;
				cin>>tid;
				g1.delete_trainer(tid);
				break;
			}
			
		case 3:
			{
				cout<<"Enter ID of the Trainer you want to update "<<endl;
				cin>>tid;
				g1.update_trainer(tid);
				break;
			}
			
		case 4:
			{
				cout<<"Trainer ID ******** Trainer Name"<<endl;
				g1.view_trainers();
				break;
			}
			
		case 5:
			{
				g1.add_equipment_data();
				break;
			}
		
		case 6:
			{
				g1.display_equipments();
				break;
			}
		 case 7:
		 	{
		 		g1.view_equipment_status();
		 		break;
			}
			
		case 8:
			{
				g1.enter_working_status();
				break;
			}
		case 9:
			{
				g1.add_exercise_plan();
				break;
			}
			
		case 10:
			{
				g1.exercise_plan();
				g1.choose_plan();
				break;
			}
			
		case 11:
			{
				g1.view_trainers();
				g1.choose_trainer();
				break;
			}
			
		case 12:
			{
				g1.view_trainers();
				break;
			}
		case 18:
			{
				g1.store_subscriptions();
				break;
			}
		case 19:
			{
				g1.check_subscription();
				break;
			}
	}
	
	
	
}
while(choice!=20);
}
};
	
int main()
{
		RoomManagement rm;
		RoomService rs;
		Restaurant rst;
		Gym g;
	int ch;
cout<<"\n\t\t\t****************************";
cout<<"\n\t\t\t* RESORT MANAGEMENT PROJECT *";
cout<<"\n\t\t\t****************************";
  system("cls");
cout<<"\n\t\t\t\t*************************";
cout<<"\n\t\t\t\t RESORT MANAGEMENT SYSTEM ";
cout<<"\n\t\t\t\t      * MAIN MENU *";
cout<<"\n\t\t\t\t*************************";

cout<<"\nPlease Select\n1. ADMIN\n2.CUSTOMER\n3.EXIT\n";
cin>>ch;
while(ch!=3)
{
switch(ch)

{
	case 1:
		int op;
			cout<<"Select:\n1. View Room Management\n2.View Restaurant Management\n3.View Gym Management\n4.Exit\n ";
		    cin>>op;
		    while(op!=4)
		{
		    switch(op)
		    {
		    	case 1: 
		    		rm.finalroommain();
                    break;
                case 2:
                		rst.finalrestaurantmain();
                      break;
                case 3:
                	g.gym_finalmain();
                	break;
                
                case 4: 
				break;

                default:
                {
                  cout<<"\n\n\t\t\tWrong choice.....!!!";
                  cout<<"\n\t\t\tPress any key to   continue....!!";
                  getch();

                }

            }
        } 
		break;
        
        case 2:
        	int opt;
	     cout<<"Select:\n1.Room Service\n2.Restaurant Service\n3.Gym\n4.View membership status\n5.Profile\n6.Visits?Check-ins\n7.Exit\n ";
		    cin>>opt;
		    while(opt!=7)
		{
			
		    switch(opt)
		    {
		    	case 1: 
		    		rs.finalservicemain();
                    break;
                case 2:
                		rst.finalrestaurantmain();
                      break;
                case 3:
                	g.gym_finalmain();
                	break;
                
                case 4: break;

                default:
                {
                  cout<<"\n\n\t\t\tWrong choice.....!!!";
                  cout<<"\n\t\t\tPress any key to   continue....!!";
                  getch();

                }

            }
        } break;
        
        case 3:
        	break;
        
        default:
        	{
        		 cout<<"\n\n\t\t\tWrong choice.....!!!";
                  cout<<"\n\t\t\tPress any key to   continue....!!";
                  getch();
			}
     	}

}		
}
		
	
